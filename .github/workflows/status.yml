name: GitHub Actions Status

on:
  # 当 "CI/CD Pipeline" 完成时触发
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

  # 手动触发（便于调试）
  workflow_dispatch: {}

jobs:
  status:
    name: GitHub Actions Status
    runs-on: ubuntu-latest
    steps:
      - name: Create status check
        # 仅在事件确实为 workflow_run 且 payload 包含 workflow_run 时执行
        if: ${{ github.event_name == 'workflow_run' && contains(toJSON(github.event), 'workflow_run') }}
        uses: actions/github-script@v7
        with:
          script: |
            //const core = require('@actions/core');

            // actions/github-script 在上下文里注入了 `github` 和 `context`
            if (!context || !context.payload || !context.payload.workflow_run) {
              core.info(`workflow_run is undefined for event: ${context ? context.eventName : 'unknown'}`);
              return;
            }

            const run = context.payload.workflow_run;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha = run.head_sha;

            // 将 workflow_run.conclusion 映射到 commit status 的 state
            let state = 'pending';
            const conclusion = run.conclusion;
            if (conclusion === 'success') state = 'success';
            else if (conclusion === 'failure' || conclusion === 'cancelled' || conclusion === 'timed_out') state = 'failure';
            else if (conclusion === 'neutral') state = 'success';

            const statusContext = `status/${(run.name || 'workflow').toLowerCase().replace(/\s+/g, '-')}`;

            try {
              await github.rest.repos.createCommitStatus({
                owner,
                repo,
                sha,
                state,
                context: statusContext,
                target_url: run.html_url
              });
              core.info('Status check created successfully');
            } catch (error) {
              core.setFailed(`Error creating status check: ${error.message}`);
            }